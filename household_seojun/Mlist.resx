<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEsAAAAXCAIAAADMYCUxAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAZgaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNr
        ZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHht
        bG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzE0MiA3OS4x
        NjA5MjQsIDIwMTcvMDcvMTMtMDE6MDY6MzkgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0
        cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24g
        cmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6
        eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8v
        bnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnBob3Rvc2hvcD0i
        aHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9y
        Zy9kYy9lbGVtZW50cy8xLjEvIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAoV2lu
        ZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDE5LTA2LTE3VDIwOjMyOjM3KzA5OjAwIiB4bXA6TWV0YWRh
        dGFEYXRlPSIyMDE5LTA2LTE3VDIwOjMyOjM3KzA5OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAxOS0wNi0x
        N1QyMDozMjozNyswOTowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2ZTQ4NDFmMi1jMWQ2LTNi
        NGQtYTY1YS1jYjc3MWY5YjljM2QiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hv
        cDplNTgyNWVjNy00NzY3LTAyNDAtOTFmNC0zMTFmYzA3ZDVhOTciIHhtcE1NOk9yaWdpbmFsRG9jdW1l
        bnRJRD0ieG1wLmRpZDplMWEwNzdkNi03NDNjLTI4NDAtYTQ2YS0yNGU5YTIxNmJjOGUiIHBob3Rvc2hv
        cDpDb2xvck1vZGU9IjMiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6
        U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlp
        ZDplMWEwNzdkNi03NDNjLTI4NDAtYTQ2YS0yNGU5YTIxNmJjOGUiIHN0RXZ0OndoZW49IjIwMTktMDYt
        MTdUMjA6MzI6MzcrMDk6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAo
        V2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4
        bXAuaWlkOjZlNDg0MWYyLWMxZDYtM2I0ZC1hNjVhLWNiNzcxZjliOWMzZCIgc3RFdnQ6d2hlbj0iMjAx
        OS0wNi0xN1QyMDozMjozNyswOTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9w
        IENDIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9y
        eT4gPHBob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPHJkZjpCYWc+IDxyZGY6bGk+YWRvYmU6ZG9j
        aWQ6cGhvdG9zaG9wOjg4NjdmN2Y5LWM1YzctOTg0NC04NTlhLWU3MmUwMzFjOGYyOTwvcmRmOmxpPiA8
        L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8L3JkZjpEZXNjcmlwdGlvbj4g
        PC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PkPBxrcAAAMRSURBVFhHzZjN
        ahRBFIXzKIJP4cJXcOMLZOXelVtXLt25c+fGpaKgOBEHQ2I0ChFD0IAGo+iQqBHJoIuEk88+cimrp5vp
        HsbycmiqblffOufW78zCbQ1mwUDLK3oeoGr/HS3Zc0/DaNwVDj7UWubvhJkUjrSvmuF8pCc/dPinLn3U
        KPswxWM9faU3r/UOrOpF+NPg3/Q9/F3RXyFs6HtP+5vaClDF+VUHPO0Za0x54kg+1Eo9R4hZ18s0+I7e
        U97WTvb5lOipEB4VH93QzQWdClzQRfsxe6BImcmWRWCcj3TMK2Tc0l3iAIvBGE+eDu6YX3SQRZgSfRSS
        TrqEDewhAYPANV2PrLcrdI6WNDytM25pEAG/rZhCOqNLOk6ZZaCBCxMVblROEuE2Z3XOmXKVIeUtVngM
        ST8MAFmHBLiiq/aYoula4Uh7m9qOCLv6hJP2NECe1yp2SZftcbWYQnYILyGYmVMAcrGW7LFCW4hMZwEy
        KLPfVg22/JU1F1MI0kFgITGMsDmvRVd5hZkrTiiSCDzssf48VeiFZ8+a1v0VZaykQmYdvXoAYZCmHPjM
        cDmAB/Pnb7VLGW34yYjbE8Q54lm1LafwvoZeijGpUsRm6CprkmaeqzGGnHhUkeSNlCcyXAYxscsoRN5P
        /TIDDJZoMDOoxCLEMrrccjgDI47Petp73AxEMlHdmGcZhc+0QX/woOOA+bHNRDlmrBVyWnBTTeM80HJc
        G9K7C0YGS574ad8TYZ11hVkcw/c7tNHMi5mxRXxJhb4xwgZOjCQkOBgp18Hs5ZV5N/3C4BXmXBCKMtrw
        F761+ezCkGFyLfDca/oF5DhuGQoZcOcxtX9984YxvcKeBDfBvMkCLZtmaUX+L4VN1v4TrAU9FYLYJ5qs
        q0JOV0/vOtqnejv6KwTMHJZHHSlv+FFuUjhm45TYnNy4Ce1B2jGTwib81jedwg/6zFt2LC6A2SRP4UtP
        /EXSCXNR6DMgjOM7OwwD2f2hxThFsm+nxFwUcncJkRTSq0wdiOTnIlf5bKqn6L2Rgrko/I+gwQlmRxFY
        ORa0+gAAAABJRU5ErkJggg==
</value>
  </data>
</root>